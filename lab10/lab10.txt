	a. Compare and contrast MongoDB and the SQL databases you’ve used before. Are there things that one can do that the other can’t?
    
	MongoDB is a non-relational or distributed databased that is document based and organized similarly to json data that can be accessed and modified with method-like commands.

	SQL has a predefined schema and is a called a relational database, which is table based and organized so that data must be accessed through standard SQL query methods.

	MongoDB allows users to access individual attributes of each stored object without much difficulty whereas SQL requires you to write a long, messy query command. Adding new attributes is extremely easy in MongoDB as well.

    b. You could run MongoDB locally. What advantages and/or disadvantages would that bring with respect to the cloud database you have now?
    
    Cloud databases are constantly questioned as to whether they are truly secure, but with a local database you wouldn't have to worry about that. Cloud databases all have size limitations while personal storage is easier to set up.

    c. You’ve built a “sandbox” database on mLab. Could you use this for a production database? Why or why not?

    No, production databases need a redundant node, emergency support, and consistent/predictable performance. Sandbox databases on mLab do not have a multi-node or replica set deployment that would protect against unnexpected down time, and emergency support is only offered to paying customers.

Exercise 10.2

    a. For this integration of mLab into your application, was it better to run the modified server (npm start) or the full Webpack development environment (npm run dev)? Why?
    
    I was abe to do both and neither seemed to have a benefit, but after talking to a friend it sounded like I shouldn't have been able to run the program using npm start.

    b. Explain what happens when you modify the database using mLab’s web interface rather than your application? Try adding/updating/deleting comment documents.
    
    It takes a couple seconds to load the changes on the client.

    c. Is this comments application the sort of application that should use an SQL or a noSQL database? Explain your answer.

    I think because of the simplicity of the application either would and obviously can implement adequate databases, but if I were to choose one the noSQL database does not require the programmer to define a schema and allows for greater flexibility.